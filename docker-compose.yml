version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: timescale/timescaledb:latest-pg13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: news_bias
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and task queue
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API service
  api:
    build:
      context: .
      dockerfile: ./docker/api.Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/news_bias
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    ports:
      - "8000:8000"
    restart: unless-stopped
    volumes:
      - ./api:/app/api
      - ./database:/app/database
      - ./analysis:/app/analysis

  # Frontend dashboard
  frontend:
    build:
      context: .
      dockerfile: ./docker/frontend.Dockerfile
    depends_on:
      - api
    ports:
      - "80:80"
    restart: unless-stopped

  # Scraper service (scheduled)
  scraper:
    build:
      context: .
      dockerfile: ./docker/scraper.Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/news_bias
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    restart: unless-stopped
    volumes:
      - ./scrapers:/app/scrapers
      - ./database:/app/database

  # Celery worker for background tasks
  worker:
    build:
      context: .
      dockerfile: ./docker/worker.Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/news_bias
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    restart: unless-stopped
    volumes:
      - ./processors:/app/processors
      - ./database:/app/database
      - ./analysis:/app/analysis

  # Celery beat for scheduled tasks
  scheduler:
    build:
      context: .
      dockerfile: ./docker/scheduler.Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      worker:
        condition: service_started
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/news_bias
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    restart: unless-stopped
    volumes:
      - ./processors:/app/processors

  # Flower for monitoring Celery tasks
  flower:
    build:
      context: .
      dockerfile: ./docker/flower.Dockerfile
    depends_on:
      redis:
        condition: service_healthy
      worker:
        condition: service_started
    environment:
      - REDIS_URL=redis://redis:6379
    ports:
      - "5555:5555"
    restart: unless-stopped

volumes:
  postgres_data: